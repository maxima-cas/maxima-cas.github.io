<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <title>Maxima Tutorial</title>
  <meta content="text/html; charset=windows-1252"
 http-equiv="Content-Type">
  <link href="defstyle.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffbb">
<table bgcolor="#ffffff" border="0" cellpadding="2">
  <tbody>
    <tr bgcolor="#ccffcc">
      <td>
      <center><a href="./Programming0001.htm">Anterior</a></center>
      </td>
      <td>
      <center><a href="../Contents.htm">Índice</a></center>
      </td>
      <td>
      <center><a href="./Programming0003.htm">Seguinte</a></center>
      </td>
    </tr>
  </tbody>
</table>
<h2>Programando no Maxima</h2>
<h3>Exemplos adicionais</h3>
<hr class="endOfHeader">
<p>O Cálculo de polinômios ortogonais</p>
<p>Os polinômios de Legendre são definidos por:</p>
<pre class="mathExpression">  p<sub>0</sub>(x) = 1<br>  p<sub>1</sub>(x) = x<br>  n*p<sub>n</sub>(x) = (2*n -1)*x*p<sub>n-1</sub>(x) - (n - 1)*p<sub>n-2</sub>(x)</pre>
<p>O bojetivo dessa seção é desenvolver programas que calculem o
polinômio de Legendre para um dado valor de&nbsp; n.</p>
<p>Para uma primeira tentativa porcuramos seuir fielmente a definição
da forma mais fiel possível:</p>
<pre class="mInput">Legendre1(n, x) :=<br>block ( [],<br>    if n = 0 <br>       then 1<br>       else<br>        if n = 1<br>           then x<br>           else  ((2*n - 1)*x*Legendre1 (n - 1, x)<br>                  - (n - 1)  *Legendre1 (n - 2, x)) / n<br>)</pre>
<p>Um primeiro teste fornece:</p>
<pre class="mInput">Legendre1(3, z);<br><span class="response">
						  2
					  5 z (3 z  - 1)
					  -------------- - 2 z
						2
(%o2) 					  --------------------
						   3
</span>Legendre1 (5, t);<br><span class="response">
				 2
			 5 t (3 t  - 1)
		    7 t (-------------- - 2 t)	       2		    2
			       2		 3 (3 t  - 1)	    5 t (3 t  - 1)
	       9 t (-------------------------- - ------------)	 4 (-------------- - 2 t)
				3		      2			  2
	       ----------------------------------------------- - ------------------------
				      4					    3
(%o3) 	       --------------------------------------------------------------------------
						   5</span></pre>
<p>Perfeito para os amantes de expressões imensas, mas longe da
perfeição para aqueles que preferem resultados simplificados. O que
fizemos errado?</p>
<p>Nada. Simplificação é uma coisa difícil de fazer e simplesmente
ignoramos o problema. Multiplicamos e adicionamos polinômios. Para
obter uma representação canônica de polinômios temos que expandir todos
os produtos:</p>
<pre class="mInput">Legendre2(n, x) :=<br>block ( [],<br>    if n = 0 <br>       then 1<br>       else<br>        if n = 1<br>           then x<br>           else <b>expand(</b>((2*n - 1)*x*Legendre2 (n - 1, x)<br>                        - (n - 1)  *Legendre2 (n - 2, x)) / n<b>)</b>
)</pre>
<pre class="mInput">Legendre2(3, z);<br><span class="response">						  3<br>					       5 z    3 z<br>(%o5) 					       ---- - ---<br>						2      2<br></span>Legendre2(5, z);<br><span
 class="response">					      5	      3<br>					  63 z	  35 z	  15 z<br>(%o6) 					  ----- - ----- + ----<br>					    8	    4	   8</span></pre>
<p>Expandimos a expressão inteira - Essa é a aproximação segura, mas
pode ter um custo muito alto.
Podemos querer&nbsp; perguntar sobre simplificações com o menor
esforço. Isso é suficiente expandir os dois produtos separadamente:</p>
<p>Aqui expandimos somente a expressão que contém uma multiplicação com
a variável:</p>
<pre class="mInput">Legendre2(n, x) :=<br>block ( [],<br>    if n = 0 <br>       then 1<br>       else<br>        if n = 1<br>           then x<br>           else (<b>expand(</b>(2*n - 1)*x*Legendre2 (n - 1, x)<b>)</b>
                        - (n - 1)  *Legendre2 (n - 2, x)) / n
)</pre>
<p>Isso é melhor:</p>
<pre class="mInput">Legendre2(n, x) :=<br>block ( [],<br>    if n = 0 <br>       then 1<br>       else<br>        if n = 1<br>           then x<br>           else <b>expand(</b>(2*n - 1)/n*x*Legendre2 (n - 1, x))<br>                - expand((n - 1)/n  *Legendre2 (n - 2, x))<b></b>
)</pre>
<p>Uma olhada restrita no código reela que ele é ineficiente e nem
mesmo é elegante como se pode pensar inicialmente. A falha principal é
que um monte de cálculos são realizados repetidamente . Para ver isso,
você pode usar a facilidade <span style="font-weight: bold;">trace</span>
do Maxima:</p>
<pre class="mInput">trace(Legendre2);<br><span class="response">     [Legendre2]</span>
Legendre2(7, z)</pre>
<p>Isso escreverá uma mensagem todas as vezes que a função <b>Legendre2</b>
for iniciada e concluída.</p>
<p>***</p>
<p>O caminho fácil para evitar isso é evitar ciclos aninhados. Isso é o
que iremos fazer adiante.</p>
<hr width="80%">
<p>Vamos agora escrever uma função não cíclica que executa o mesmo
cálculo:</p>
<pre class="mInput">LegendreN(n, x) :=<br>block ( [p0, p1, pn, cnt],<br>   if n = 0<br>      then return (1)<br>      else if n = 1<br>              then return (x),<br>   p0 : 1,<br>   p1 : x,<br>   cnt: 2,<br>   while cnt &lt;= n do<br>    (  pn: expand(((2*cnt - 1)*x*p1<br>                   - (cnt - 1)  *p0) / cnt),<br>       p0: p1,<br>       p1: pn,<br>       cnt: cnt + 1<br>    ),<br>   pn      <br>)</pre>
<p>Aqui está uma variante que usa uma declaração composta - que é, um
bloco - dentro de uma cláusula <b>while</b>.</p>
<pre class="mInput">LegendreN(n, x) :=<br>block ( [p0, p1, pn, cnt],<br>   if n = 0<br>      then return (1)<br>      else if n = 1<br>              then return (x),<br>   p0 : 1,<br>   p1 : x,<br>   cnt: 2,<br>   while block(pn: expand(((2*cnt - 1)*x*p1<br>                           - (cnt - 1)  *p0) / cnt),<br>               cnt: cnt + 1,<br>               cnt &lt;= n)<br>   do<br>    (  <br>       p0: p1,<br>       p1: pn<br>    ),<br>   pn      <br>)</pre>
<p>Isso é possível também programar uma repetição com uma instrução de
salto.
existe uma boa razão para preferir uma variante adequada para a
declaração <b>do</b>, mas um programador deve estar apto a entender
programas Maxima com instruções de salto.</p>
<pre class="mInput">LegendreN(n, x) :=<br>block ( [p0, p1, pn, cnt],<br>     if n = 0<br>        then return (1)<br>        else if n = 1<br>              then return (x),<br>     p0 : 1,<br>     p1 : x,<br>     cnt: 2,<br>   beginOfLoop,<br>     pn: expand(((2*cnt - 1)*x*p1<br>                 - (cnt - 1)  *p0) / cnt),<br>     p0: p1,<br>     p1: pn,<br>     cnt: cnt + 1,<br>     if cnt &lt;= n then go(beginOfLoop),<br>   pn      <br>);</pre>
<p>Saltando agora, escrevemos definições que constóem seqüências de
polinômios de grau crescente. S ào todos esses polinômios necessários?
Não, eles não são.
O que é preciso para os resultados intermediários são os
coeficientes&nbsp; de todos esses polinômios - nada mais.<br>
O seguinte exemplo usa três listas para armazenar os coeficientes dos
três polinômios p<sub>n</sub>, p<sub>n-1</sub>, p<sub>n-2</sub>:</p>
<pre class="mInput">LegendreNN(n, x) :=<br>block ( [cnt, pn, coeffsP0, coeffsP1, coeffsPN, oldList ],<br>   if n = 0<br>      then return (1)<br>      else if n = 1<br>              then return (x),<br>   coeffsP0: makelist (0, x, 0, n),<br>   coeffsP1: makelist (0, x, 0, n),<br>   coeffsPN: makelist (0, x, 0, n),<br>   coeffsP0[1]: 1,<br>   coeffsP1[2]: 1,<br>   cnt: 2,<br>   while cnt &lt;= n do<br>    (coeffsPN[1]: -coeffsP0[1]*(cnt - 1)/cnt,<br>       for idx : 2 thru cnt + 1 do<br>          coeffsPN[idx] :  ((2*cnt - 1)*coeffsP1[idx - 1]<br>                             -(cnt - 1)*coeffsP0[idx])/ cnt,<br>        <br>       oldList: coeffsP0,<br>       coeffsP0: coeffsP1,<br>       coeffsP1: coeffsPN,<br>       coeffsPN: oldList,<br>       cnt: cnt + 1 <br>    ),<br>   pn: 0,<br>   for idx:1 thru n + 1 do<br>     pn: pn + coeffsP1[idx]*x^(idx - 1),<br>   pn      <br>);</pre>
<p>Para comparar os tempos de computação solicitemos ao Maxima que
mostre todos os tempos:</p>
<pre class="mInput">showtime:all;</pre>
<p>Agora podemos executar as definições que queremos comparar.
Para suprimir a saída desse grande polinômio, encerramos nossa entrada
com um sinal de dólar:</p>
<pre class="mInput">(%i4) LegendreN(200, x)$<br>Evaluation took 36.58 seconds (36.58 elapsed)<br>(%i5) LegendreNN(200, x)$<br>Evaluation took 13.62 seconds (13.62 elapsed)<br></pre>
<p>Concluímos que aritmética de polinômios e expansões freqüêntes de
polinômios consome muito tempo em computações.</p>
<br>
<hr class="startOfFooter">
<table bgcolor="#ffffff" border="0" cellpadding="2">
  <tbody>
    <tr bgcolor="#ccffcc">
      <td>
      <center><a href="./Programming0001.htm">Anterior</a></center>
      </td>
      <td>
      <center><a href="../Contents.htm">Índice</a></center>
      </td>
      <td>
      <center><a href="./Programming0003.htm">Seguinte</a></center>
      </td>
    </tr>
  </tbody>
</table>
</body>
</html>
