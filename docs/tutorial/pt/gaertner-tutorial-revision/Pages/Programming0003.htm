<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <title>Maxima Tutorial</title>
  <meta content="text/html; charset=windows-1252"
 http-equiv="Content-Type">
  <link href="defstyle.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#ffffbb">
<table bgcolor="#ffffff" border="0" cellpadding="2">
  <tbody>
    <tr bgcolor="#ccffcc">
      <td>
      <center><a href="./Programming0002.htm">Anterior</a></center>
      </td>
      <td>
      <center><a href="../Contents.htm">Índice</a></center>
      </td>
    </tr>
  </tbody>
</table>
<p></p>
<h2>Programando no Maxima</h2>
<p></p>
<hr class="endOfHeader">
<p>Regras de abrangência</p>
<pre class="mInput">function1() := <br> block ( [var],<br>         var: 1,<br>         function2(),<br>         var);</pre>
<pre class="mInput">function2() :=<br>  block( [],<br>         var: var + 1,<br>         nil);</pre>
<p>para fazer a mesma coisa no Lisp moderno, temos que usar a então
chamada proclamação:</p>
<pre class="mInput">(declaim special var)<br><br>(defun f1<br>       ()<br>       (prog (var)<br>             (setq var 1)<br>             (f2)<br>             (return var)<br>)      )<br><br>(defun f2<br>       ()<br>       (setq var (+ 1 var))<br>)</pre>
<p>Regras de abrangência era uma coisa simples nos tempos passados do
Lisp:
Lisp foi dinamicamente enchido por regras de abrangência.
Lamentavelmente, regras de abrangência fosse mais tarde complicada como
uma conseqüêcia de discurssões como elas podem ajudar somente entre
cientista ou entre os menbros de um comitê de padronização.
Como uma conseqüência de padronização, Lisp foi modificado para abrangê
léxica com abrangência dinâmica opcional para variáveis proclamadas.</p>
<p>Maxima foi escrito quando LIsp era uma linguagem de abangência
dinâmica.
Largas partes do Maxima ainda requerem a disponibilidade de regras de
abrangência dinâmicas.
As mudanças que foram introduzidas em sistemas&nbsp; Lisp
comercialmente disponíveis certamente não facilitam a manutensão do <span
 style="font-weight: bold;">Macsyma</span>
(e <span style="font-weight: bold;">Maxima</span>) e existem razões
para assumir que&nbsp; a completa ideologia conduz discurssões sobre as
regras corretas de abrangência
para o Lisp encoraja os criadores do Maple e do Mathematica a escolher
C como a linguagem de implementação de seus programas. (C era também
mais barato de obter que um dos grandes Lisps nos anos oitenta do
século vinte.)</p>
<p>A situação com Maxima é difícil: um rápido exame do integrador
simbólico (no arquivo sinint.lisp) mostra que&nbsp; as rotinas de
integração para funções racionais ainda usam regras de abrangência
dinâmica. O arquivo sinint.lisp contém essa declaração para reforçar
associação dinâmica para as variáveis selecionadas:</p>
<pre class="codefragment">(declare-top (<b>SPECIAL</b> RISCHPF GENVAR $SAVEFACTORS CHECKFACTORS<br>		  EXP VAR $FACTORFLAG $RATFAC $LOGABS $EXPOP $EXPON<br>		  $KEEPFLOAT RATFORM ROOTFACTOR PARDENOM $ALGEBRAIC<br>		  WHOLEPART PARNUMER VARLIST LOGPTDX SWITCH1))<br></pre>
<p><b>SPECIAL</b> é a 'palavra mágica' que precisamos para manter
aquele velho código executando em um ambiente&nbsp; CommonLisp.</p>
<br>
<hr class="startOfFooter">
<table bgcolor="#ffffff" border="0" cellpadding="2">
  <tbody>
    <tr bgcolor="#ccffcc">
      <td>
      <center><a href="./Programming0002.htm">Anterior</a></center>
      </td>
      <td>
      <center><a href="../Contents.htm">Índice</a></center>
      </td>
    </tr>
  </tbody>
</table>
</body>
</html>
